from django.core.management.base import BaseCommand, CommandError
from django.contrib.auth import get_user_model
from django.conf import settings
from django.template import Template, Context
from ninagram.bot import Bot
import os

TEMPLATE = """{% load tg_bot %}
# This is the states module, automatically generated by the startbot command
from django.utils.translation import gettext as _
from django.utils.formats import date_format
from django.conf import settings
from ninagram.states.base import *
from ninagram.response import *
from base.models import *
from ninagram.models import *
from loguru import logger
import traceback
import re
import datetime
from ninagram.response import *
{% if use_models %}
from {{ app }}.models import *
{% endif %}
import locale

{% for state in states %}
@register_state
class {{ state.name|title }}State(State):

    name = "{{ state.name|upper }}"
    transitions = {'back':':1'}
    {% if state.group %}
    SAME_STEP_GROUP = True
    {% endif %}
    
    {% for step in state.steps %}
    @register_step
    def step_{{ step.number }}_{{ step.name }}_menu(self, update):
        {% if step.on_menu and step.on_menu.message %}
        message = _("{{ step.on_menu.message }}")
        {% elif step.on_menu and step.on_menu.template %}
        ctx = {"update": update}
        tpl = Template("{{ step.on_menu.template }}")
        context = Context(ctx)
        message = _(tpl.render(context))
        {% else %}
        message = _("This is the step {{ step.number }}"){% endif %}
        replies = [[InlineKeyboardButton(_("Back"), callback_data="back")]]
        kbd = InlineKeyboardMarkup(replies)
        return MenuResponse(message, kbd)
        
    def step_{{ step.number }}_{{ step.name }}_next(self, update):
        {% if step.on_next and step.on_next.actions %}{% for action in step.on_next.actions %}
        {{ action|expand_action }}
        {% endfor %}{% endif %}
        pass
        
    {% endfor %}
    
    
{% endfor %}

"""


class Command(BaseCommand):
    """Create a states.py file in the specified app directory containing 
    the states"""
    
    def add_arguments(self, parser):
        parser.add_argument('args', nargs='+')
        parser.add_argument('--models', action='store_true', help='Work with the models.py')
    
    def handle(self, *args, **options):
        print("Starting the bot...")
        self.app_dirs = {}
        self.add_models = False
        for arg in args:
            if arg.startswith('-'):
                if arg == '--models':
                    self.add_models = True
                continue
            
            self.app_dirs[arg] = os.path.join(settings.BASE_DIR, arg)
            
        print("I will work with those app directories: ", self.app_dirs)
        
        for app, directory in self.app_dirs.items():
            self.handle_app(app, directory)
        
    def handle_app(self, app, directory):
        ctx = {}
        ctx['states'] = self.get_states(app)
        tpl = Template(TEMPLATE)
            
        context = Context(ctx)
        module_content = tpl.render(context)
        
        with open(os.path.join(directory, 'states.py'), 'w') as fp:
            fp.write(module_content)
    
    def get_states(self, app):
        states = [
            {
                'name': 'Start',
                'group': True,
                'steps': [
                    {
                        'number': 2,
                        'name': 'bible',
                        'on_menu':{
                            'message': 'Welcome to the bible',
                            'keypad': {
                                'type': "inline",
                                'buttons':[
                                    # first row
                                    [
                                        {
                                            'text': "My button",
                                            'callback_data': "Yes"
                                        }                                        
                                    ],
                                    [
                                        {
                                            'text': "Hehe",
                                            "callback_url": "http:://"
                                        }
                                    ]
                                ]
                            }
                        }
                    },
                    {
                        'number': 3,
                        'name': 'coran',
                        'on_next':{
                            'actions': [
                                {
                                    'type': 'send_message',
                                    'id': 15678997,
                                    'message': 'Bonjour'
                                },
                                {
                                    'type': 'send_message',
                                    'id': 'admins',
                                    'message': 'Hello world admins'
                                }
                            ]
                        }
                    },
                    {
                        'number': 4,
                        'name': 'gita',
                        'on_menu':{
                            'template': "This is a template for you {{ update.db.user.dj.get_full_name }}"
                        },
                        'on_next': {
                            'actions': [
                                {
                                    'type': 'send_message',
                                    'id': [567768, 789899, 45678987],
                                    'message': 'Salut a tous'
                                }
                            ]
                        }
                    }
                ]
            }
        ]
        
        return states
